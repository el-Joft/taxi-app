Configuring Channels

At settings.py file add

REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379')

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [REDIS_URL],
        },
    },
}

At the installed app add 
'channels',
'rest_framework',

create a file called routing.py, add the below code

from channels.routing import ProtocolTypeRouter

application = ProtocolTypeRouter({})

# taxi/settings.py

ASGI_APPLICATION = 'taxi.routing.application'

Also, add a new asgi.py file alongside the wsgi.py file.


import os
import django

from channels.routing import get_default_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'taxi.settings')
django.setup()
application = get_default_application()


In DRF we have four authentication to choose from

BasicAuthentication
RemoteUserAuthentication - requires passing the authentication to the third party, the third party is a centralized single sign-on server that supports a protocol such as LDAP, CAS, or SAML.
SessionAuthentication
TokenAuthentication
Session and Token exchange user credentials over an encrypted string


Since we are working on Websocket, and it is designed to work on mobile app, TokenAuthentication will be redesigned to fit in

Add this to the settings.py
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    )
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=1),
    'USER_ID_CLAIM': 'id',
}

Create a test directory for all our tests




Setting Up Websocket

# tests/test_websocket.py

from channels.testing import WebsocketCommunicator
import pytest

from taxi.routing import application


TEST_CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}


@pytest.mark.asyncio
class TestWebSocket:
    async def test_can_connect_to_server(self, settings):
        settings.CHANNEL_LAYERS = TEST_CHANNEL_LAYERS
        communicator = WebsocketCommunicator(
            application=application,
            path='/taxi/'
        )
        connected, _ = await communicator.connect()
        assert connected is True
        await communicator.disconnect()

Create a channel consumer

from channels.generic.websocket import AsyncJsonWebsocketConsumer


class TaxiConsumer(AsyncJsonWebsocketConsumer):
    async def connect(self):
        await self.accept()

    async def disconnect(self, code):
        await super().disconnect(code)

Note: A Channels consumer is like a Django view with extra steps to support the WebSocket protocol. 
Whereas a Django view can only process an incoming request, a Channels consumer can send and receive messages 
and react to the WebSocket connection being opened and closed.


async def receive_json(self, content, **kwargs):
        print(content)
        message_type = content.get('type')
        if message_type == 'echo.message':
            await self.send_json({
                'type': message_type,
                'data': content.get('data'),
            })

The receive_json() function is responsible for processing all messages that come to the server.
Our message is an object with a type and a data payload. Passing a type is a Channels convention that serves two purposes. 
First, it helps differentiate incoming messages and tells the server how to process them. 
Second, the type maps directly to a consumer function when sent from another channel layer.



Authenticating Socket Connections
Establishing a WebSocket connection starts with a “handshake” between the client and the server over HTTP.